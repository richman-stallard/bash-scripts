#!/bin/bash
# Define userscripts here that you want to be able to access.
# This file is intended to be sourced by .bashrc. Put it in ~ and add the
# following to .bashrc:
# if [ -f ~/.bashscripts ]; then source ~/.bashscripts; fi

wat() {
    # tell what options of a command do
    # example usage: $ wat grep -A
    x="${1:?}"; shift; y=("${@:?}")
    for i in "${y[@]}"; do
        man "${x}" | sed -n "/^\s*${i}/,/^$/p"
    done
}

flipflop() {
    # turn regular text into upside-down text
    # example usage: $ flipflop "upside-down, pls"
    sed '
        y/!?_.<>(),'/¡¿‾·><)(',/
        y/ZYXWVUTSRQPONMLKJIHGFEDCBA/Z⅄XMΛ∩┴SɹQԀONW˥ʞſIHפℲƎpƆq∀/
        y/zyxwvutsrqponmlkjihgfedcba/zʎxʍʌnʇsɹbdouɯlʞɾ!ɥƃɟǝpɔqɐ/
        y/9876543210/68ㄥ9ϛㄣƐᄅƖ0/
    ' <<< "${@:-$(</dev/stdin)}" | rev | tac
}

fff() {
    # file flip flop. Reads text to flip upside-down from file
    # example usage: $ fff mypasta.txt
    cat "$1" | sed '
        y/!?_.<>(),'/¡¿‾·><)(',/
        y/ZYXWVUTSRQPONMLKJIHGFEDCBA/Z⅄XMΛ∩┴SɹQԀONW˥ʞſIHפℲƎpƆq∀/
        y/zyxwvutsrqponmlkjihgfedcba/zʎxʍʌnʇsɹbdouɯlʞɾ!ɥƃɟǝpɔqɐ/
        y/9876543210/68ㄥ9ϛㄣƐᄅƖ0/
    ' | rev | tac
}

reverse() {
    # reverses an audio clip
    # if input clip is not in wav format, uses ffmpeg to convert to wav
    # if output clip is not wav, uses ffmpeg to convert into desired format
    # example usage: $ reverse forwardaudio.wav reverse.ogg
    f1=$(sed 's/\.[a-zA-Z0-9_-]*$//' <<< "$1")    
    e1=$(sed "s/$f1//" <<< "$1")    
    f2=$(sed 's/\.[a-zA-Z0-9_-]*$//' <<< "$2")    
    e2=$(sed "s/$f2//" <<< "$2")    
    if [ "$e1" != ".wav" ]; then
        ffmpeg -i "$1" -vn -sn "$f1.wav"
    fi
    sox -V "$f1.wav" "$f2.wav" reverse
    if [ "$e2" != ".wav" ]; then
        ffmpeg -i "$f2.wav" -vn -sn "$2"
        rm "$f2.wav"
    fi
    if [ "$e1" != ".wav" ]; then
        rm "$f1.wav"
    fi
}

interject() {
    # echo the GNU/Linux interjection pasta for convenient copypasting
    echo "I'd just like to interject for a moment. What you're referring to as Linux, is in fact, GNU/Linux, or as I've recently taken to calling it, GNU plus Linux. Linux is not an operating system unto itself, but rather another free component of a fully functioning GNU system made useful by the GNU corelibs, shell utilities and vital system components comprising a full OS as defined by POSIX.

Many computer users run a modified version of the GNU system every day, without realizing it. Through a peculiar turn of events, the version of GNU which is widely used today is often called \"Linux\", and many of its users are not aware that it is basically the GNU system, developed by the GNU Project.

There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine's resources to the other programs that you run. The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system. Linux is normally used in combination with the GNU operating system: the whole system is basically GNU with Linux added, or GNU/Linux. All the so-called \"Linux\" distributions are really distributions of GNU/Linux."
}

navyseal() {
    # echo the Gorilla warfare pasta for convenient shitposting
    echo "What the fuck did you just fucking say about me, you little bitch? I’ll have you know I graduated top of my class in the Navy Seals, and I’ve been involved in numerous secret raids on Al-Quaeda, and I have over 300 confirmed kills. I am trained in gorilla warfare and I’m the top sniper in the entire US armed forces. You are nothing to me but just another target. I will wipe you the fuck out with precision the likes of which has never been seen before on this Earth, mark my fucking words. You think you can get away with saying that shit to me over the Internet? Think again, fucker. As we speak I am contacting my secret network of spies across the USA and your IP is being traced right now so you better prepare for the storm, maggot. The storm that wipes out the pathetic little thing you call your life. You’re fucking dead, kid. I can be anywhere, anytime, and I can kill you in over seven hundred ways, and that’s just with my bare hands. Not only am I extensively trained in unarmed combat, but I have access to the entire arsenal of the United States Marine Corps and I will use it to its full extent to wipe your miserable ass off the face of the continent, you little shit. If only you could have known what unholy retribution your little “clever” comment was about to bring down upon you, maybe you would have held your fucking tongue. But you couldn’t, you didn’t, and now you’re paying the price, you goddamn idiot. I will shit fury all over you and you will drown in it. You’re fucking dead, kiddo."
}

newc() {
    # start a new basic C program
    # example usage:
    # $ newc # creates and opens timestamped file in /tmp
    # $ newc myprog.c # creates myprog.c in current working directory
    if [[ -z "$1" ]]; then
        outfile="/tmp/newc.$(date -Iseconds).c"
    else
        outfile="$1"
    fi
    echo '#include <stdio.h>
#include <stdlib.h>

int main() {
    char ins[32];
    
    for (;;) {
        printf("> ");
        scanf("%s", ins);
        
        printf("%s\n", ins);
    }
    return 0;
}' > "$outfile"
    vim "$outfile"
    #if [[ -z "$1" ]]; then rm "$outfile"; fi
}

newpy() {
    # start a new basic python program
    # example usage:
    # $ newpy # creates and opens timestamped file in /tmp
    # $ newpy myprog.py # creates myprog.py in current working directory
    if [[ -z "$1" ]]; then
        outfile="/tmp/newpy.$(date -Iseconds).py"
    else
        outfile="$1"
    fi
    echo 'def main():
    ins = ""
    try:
        while True:
            print(">"),
            ins = raw_input()
            
            print(ins)
    except KeyboardInterrupt:
        pass
    
    return 0
if __name__ == "__main__":
    main()' > "$outfile"

    vim "$outfile"
    #if [[ -z "$1" ]]; then rm "$outfile"; fi
}

desc() {
    # get description of youtube video(s) from their video ID
    # example usage: $ desc xe27GQJpdqI ow3-1iWVKws
    for ele in "$@"; do
        link="https://youtube.com/watch?v=$ele"
        echo "Fetching description of video $(youtube-dl --get-title $link)..."
        #echo "--------------------"
        youtube-dl --get-description "$link"
        echo "--------------------"
    done
}

beep() {
    # terminal bell is usually silent, play sine over speakers in addition to it
    # optional args determine duration and pitch
    # example usage:
    # $ beep
    if [[ $1 == "" ]]
    then
        duration="0.05"    
    else
        duration="$1"
    fi
    if [[ $2 == "" ]]
    then
        pitch="880"
    else
        pitch="$2"
    fi
    play -q -n synth "$duration" sin "$pitch" |  echo -e "\a"
}

latex() {
    # shorthand for quickly compiling and viewing latex files
    # example usage: $ latex mydoc.tex
    if [[ $1 == "" ]]
    then
        echo "Error! Argument required!"
        return 42
    fi
    pdflatex "$1" && pdflatex "$1" && evince "${1%.*}.pdf"
}

vgaconnect() {
    # invoke after connecting / disconnecting secondary monitor
    # example usage: $ vgaconnect
    PRIM="LVDS1"
    EXT="VGA1"
    if [ -n "$(xrandr | grep "$EXT disconnected")" ]
    then
        xrandr --output "$PRIM" --auto --output "$EXT" --off \
        && echo "VGA disconnected"
    else
        xrandr --output "$PRIM" --auto --output "$EXT" --auto --left-of "$PRIM" \
        && echo "VGA connected"
     fi
 }
